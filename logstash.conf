input {
  stdin {
    type => "apache-access"
  }

  #file {
  #  path => "/var/log/apache2/access7102a.log"
  #  #debug => true
  #  type => "apache-access"
  #  start_position => "beginning"
  #}

  file {
    path => "/root/haproxy20150511.log"
    #debug => true
    type => "haproxy-access"
    start_position => "beginning"
  }
}

filter {
  if [type] == "apache-access" {
      grok {
        match => { "message" => "%{IPV4:clientip}(, %{IPV4:cip})* - %{USER:ident} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{URIPATH:path}(?:%{URIPARAM:param})? HTTP/%{NUMBER:httpver}\" %{NUMBER:response} (?:%{NUMBER:bytes:int}|-) \"(?:%{URI:referrer}|-)\" %{QS:agent}"}
      }

      date {
          match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      }
  }
  if [type] == "haproxy-access" {
      grok {
        add_field => {"dc" => "ty"}
        #match => ["message", "%{HAPROXYHTTP}"]
        match => ["message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_server} %{SYSLOGPROG}: %{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request}/%{INT:time_queue}/%{INT:time_backend_connect}/%{INT:time_backend_response}/%{INT:time_duration} %{INT:http_status_code} %{INT:bytes_read} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{INT:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"%{WORD:http_verb} %{URIPATH:http_request_path}(?:%{URIPARAM:http_request_param})?( HTTP/%{NUMBER:http_version}\")?"]
      }
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
        #match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      }
      mutate {
        convert => [ "client_port",  "integer" ]
        convert => [ "time_request", "integer" ]
        convert => [ "time_queue", "integer" ]
        convert => [ "time_backend_connect", "integer" ]
        #convert => [ "time_backend_response", "integer" ]
        convert => [ "time_duration", "integer" ]
        #convert => [ "http_status_code", "integer" ]
        convert => [ "bytes_read", "integer" ]
        #convert => ["actconn", "integer"]
        #convert => ["feconn", "integer"]
        #convert => ["beconn", "integer"]
        #convert => ["srvconn", "integer"]
        #convert => ["retries", "integer"]
        #convert => ["srv_queue", "integer"]
        #convert => ["backend_queue", "integer"]
        #uppercase => [ "http_verb" ]
      }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    embedded => false
    host => elasticsearch
    #port => 9300
    #index => "your Logsene app token goes here"
    #protocol => "http"
    #manage_template => false
    #cluster => "elasticsearch"
    #node_name => "Node1"
  }
}